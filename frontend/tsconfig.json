{
  "compilerOptions": {
    "typeRoots": ["./@types", "./node_modules/@types"],
    "target": "es5", // 'es3', 'es5', 'es2015', 'es2016', 'es2017','es2018', 'esnext' 가능
    "lib": ["dom", "dom.iterable", "esnext" ],  // 컴파일 과정에 사용될 라이브러리 파일 설정
    /*
    es5: global type을 사용하기 위함 (Array, Boolean, Function 등..)
    es2015.promise: Promise를 사용하기 위함
    dom: setTimeout, console.log 등 dom에서 지원해주는 기능들을 사용하기 위함
    */
    "allowJs": true, // js 파일들 ts에서 import해서 쓸 수 있는지
    "skipLibCheck": true, // 선언 파일 유형 검사 스킵
    "esModuleInterop": true, // 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공. 
                             // 'allowSyntheticDefaultImports' 암시
    "allowSyntheticDefaultImports": true, // 기본 출력(default export)이 없는 모듈로부터 기본 호출을 허용 (이 코드는 단지 유형 검사만 수행)
    "strict": true, // 모든 엄격한 유형 검사 옵션 활성화 
    "forceConsistentCasingInFileNames": true, // 파일의 이름을 대소문자 판별하게 하는 옵션
    "noFallthroughCasesInSwitch": true, //switch문 이상하면 에러내기
    "module": "esnext", //무슨 import 문법 쓸건지 'commonjs', 'amd', 'es2015', 'esnext'
    "moduleResolution": "node", // 모듈 분석 방법 설정: 'node' (Node.js) 또는 'classic' (TypeScript pre-1.6).
    "resolveJsonModule": true, // ts 파일에서 json imoprt 허용
    "isolatedModules": true, //  각 파일을 별도 모듈로 변환 ('ts.transpileModule'과 유사)
    "noEmit": true, // 타입스크립트를 컴파일하면, js변환 파일을 만들어 내지 않도록 
    "jsx": "react-jsx", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
    "incremental": true, // 증분 컴파일 활성화
    "composite": true, // 프로젝트 컴파일 활성화
    "downlevelIteration": true, // 'ES5' 혹은 'ES3' 타겟 설정 시 Iterables 'for-of', 'spread', 'destructuring' 완벽 지원 설정 
    "removeComments": true, // 컴파일시 주석제거 
  },
  "include": [ "src" ]
}